name: Terraform using Ansible

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: Terraform Workflow
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.6

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.ROLE_NAME }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Set up SSH keys
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/deployer_key.pem
        chmod 600 ~/.ssh/deployer_key.pem  # Ensure the private key has the correct permissions
        echo "${{ secrets.AWS_SSH_PUBLIC_KEY }}" > deployer_key.pub

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -var "ssh_public_key=$(cat deployer_key.pub)" -var "ssh_private_key=$(cat ~/.ssh/deployer_key.pem)"

    - name: Terraform Apply
      run: terraform apply -auto-approve -var "ssh_public_key=$(cat deployer_key.pub)" -var "ssh_private_key=$(cat ~/.ssh/deployer_key.pem)"

    - name: Install Ansible
      run: |
        sudo apt-get update
        sudo apt-get install -y ansible

    - name: Get the Public IP from Terraform Output
      id: get_ip
      run: |
        # Extract the public IP from the Terraform output and save it in the environment variable
        echo "PUBLIC_IP=$(terraform output -raw instance_public_ip)" >> $GITHUB_ENV

    - name: Configure EC2 with Ansible
      run: |
        # Use the environment variable for the IP and configure EC2
        ansible-playbook -i "$PUBLIC_IP," -u ubuntu --private-key ~/.ssh/deployer_key.pem deploy_nginx.yaml
